1.Write a blog on Difference between HTTP1.1 vs HTTP2

        HTTP (Hypertext Transfer Protocol) is the foundation of communication on the World Wide Web. 
It enables the exchange of information between a web server and a client, typically a web browser. 
Over the years, HTTP has evolved to enhance performance, security, and efficiency. Two significant versions of the protocol,
HTTP 1.1 and HTTP 2, have played a pivotal role in shaping the modern web.


Difference between HTTP/1.1 and HTTP/2 are:

HTTP/1.1  :

* It works on the textual format.	
* There is head of line blocking that blocks all the requests behind it until it doesn’t get its all resources.	
* It uses requests resource Inlining for use getting multiple pages	
* It compresses data by itself.	

HTTP/2  : 

* It works on the binary protocol.
* It allows multiplexing so one TCP connection is required for multiple requests.
* It uses PUSH frame by server that collects all multiple pages 
* It uses HPACK for data compression.

===================================================================================================================================================


2.Write a blog about objects and its internal representation in Javascript

        Objects, in JavaScript, is it’s most important data-type and forms the building blocks for modern JavaScript. 
These objects are quite different from JavaScript’s primitive data-types(Number, String, Boolean, null, undefined and symbol) 
in the sense that while these primitive data-types all store a single value each (depending on their types).

Objects are more complex and each object may contain any combination of these primitive data-types as well as reference data-types.
An object, is a reference data type. Variables that are assigned a reference value are given a reference or a pointer to that value. 
That reference or pointer points to the location in memory where the object is stored. The variables don’t actually store the value.

Loosely speaking, objects in JavaScript may be defined as an unordered collection of related data, of primitive or reference types, in the form of “key: value” pairs. 
These keys can be variables or functions and are called properties and methods, respectively, in the context of an object.

For Eg. If your object is a student, it will have properties like name, age, address, id, etc and methods like updateAddress, updateNam, etc.

Objects and properties
A JavaScript object has properties associated with it. A property of an object can be explained as a variable that is attached to the object. 
Object properties are basically the same as ordinary JavaScript variables, except for the attachment to objects. 
The properties of an object define the characteristics of the object. You access the properties of an object with a simple dot-notation:


ex :
objectName.propertyName

        Like all JavaScript variables, both the object name (which could be a normal variable) and property name are case sensitive. 
You can define a property by assigning it a value. For example, let’s create an object named myCar and give it properties named make, 
model, and year as follows:

var myCar = new Object();
myCar.make = 'Ford';
myCar.model = 'Mustang';
myCar.year = 1969;

===================================================================================================================================================